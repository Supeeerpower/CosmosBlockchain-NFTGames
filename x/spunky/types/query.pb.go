// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spunky/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetScoresRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetScoresRequest) Reset()         { *m = QueryGetScoresRequest{} }
func (m *QueryGetScoresRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetScoresRequest) ProtoMessage()    {}
func (*QueryGetScoresRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_afe01d3a1a69d9b5, []int{0}
}
func (m *QueryGetScoresRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetScoresRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetScoresRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetScoresRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetScoresRequest.Merge(m, src)
}
func (m *QueryGetScoresRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetScoresRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetScoresRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetScoresRequest proto.InternalMessageInfo

func (m *QueryGetScoresRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetScoresResponse struct {
	Scores Scores `protobuf:"bytes,1,opt,name=Scores,proto3" json:"Scores"`
}

func (m *QueryGetScoresResponse) Reset()         { *m = QueryGetScoresResponse{} }
func (m *QueryGetScoresResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetScoresResponse) ProtoMessage()    {}
func (*QueryGetScoresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_afe01d3a1a69d9b5, []int{1}
}
func (m *QueryGetScoresResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetScoresResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetScoresResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetScoresResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetScoresResponse.Merge(m, src)
}
func (m *QueryGetScoresResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetScoresResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetScoresResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetScoresResponse proto.InternalMessageInfo

func (m *QueryGetScoresResponse) GetScores() Scores {
	if m != nil {
		return m.Scores
	}
	return Scores{}
}

type QueryAllScoresRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllScoresRequest) Reset()         { *m = QueryAllScoresRequest{} }
func (m *QueryAllScoresRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllScoresRequest) ProtoMessage()    {}
func (*QueryAllScoresRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_afe01d3a1a69d9b5, []int{2}
}
func (m *QueryAllScoresRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScoresRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScoresRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScoresRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScoresRequest.Merge(m, src)
}
func (m *QueryAllScoresRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScoresRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScoresRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScoresRequest proto.InternalMessageInfo

func (m *QueryAllScoresRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllScoresResponse struct {
	Scores     []Scores            `protobuf:"bytes,1,rep,name=Scores,proto3" json:"Scores"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllScoresResponse) Reset()         { *m = QueryAllScoresResponse{} }
func (m *QueryAllScoresResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllScoresResponse) ProtoMessage()    {}
func (*QueryAllScoresResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_afe01d3a1a69d9b5, []int{3}
}
func (m *QueryAllScoresResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllScoresResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllScoresResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllScoresResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllScoresResponse.Merge(m, src)
}
func (m *QueryAllScoresResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllScoresResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllScoresResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllScoresResponse proto.InternalMessageInfo

func (m *QueryAllScoresResponse) GetScores() []Scores {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *QueryAllScoresResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNFTRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetNFTRequest) Reset()         { *m = QueryGetNFTRequest{} }
func (m *QueryGetNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNFTRequest) ProtoMessage()    {}
func (*QueryGetNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_afe01d3a1a69d9b5, []int{4}
}
func (m *QueryGetNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNFTRequest.Merge(m, src)
}
func (m *QueryGetNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNFTRequest proto.InternalMessageInfo

func (m *QueryGetNFTRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetNFTResponse struct {
	NFT NFT `protobuf:"bytes,1,opt,name=NFT,proto3" json:"NFT"`
}

func (m *QueryGetNFTResponse) Reset()         { *m = QueryGetNFTResponse{} }
func (m *QueryGetNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNFTResponse) ProtoMessage()    {}
func (*QueryGetNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_afe01d3a1a69d9b5, []int{5}
}
func (m *QueryGetNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNFTResponse.Merge(m, src)
}
func (m *QueryGetNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNFTResponse proto.InternalMessageInfo

func (m *QueryGetNFTResponse) GetNFT() NFT {
	if m != nil {
		return m.NFT
	}
	return NFT{}
}

type QueryAllNFTRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNFTRequest) Reset()         { *m = QueryAllNFTRequest{} }
func (m *QueryAllNFTRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNFTRequest) ProtoMessage()    {}
func (*QueryAllNFTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_afe01d3a1a69d9b5, []int{6}
}
func (m *QueryAllNFTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNFTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNFTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNFTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNFTRequest.Merge(m, src)
}
func (m *QueryAllNFTRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNFTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNFTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNFTRequest proto.InternalMessageInfo

func (m *QueryAllNFTRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNFTResponse struct {
	NFT        []NFT               `protobuf:"bytes,1,rep,name=NFT,proto3" json:"NFT"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNFTResponse) Reset()         { *m = QueryAllNFTResponse{} }
func (m *QueryAllNFTResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNFTResponse) ProtoMessage()    {}
func (*QueryAllNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_afe01d3a1a69d9b5, []int{7}
}
func (m *QueryAllNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNFTResponse.Merge(m, src)
}
func (m *QueryAllNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNFTResponse proto.InternalMessageInfo

func (m *QueryAllNFTResponse) GetNFT() []NFT {
	if m != nil {
		return m.NFT
	}
	return nil
}

func (m *QueryAllNFTResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetScoresRequest)(nil), "singhp1069.spunky.spunky.QueryGetScoresRequest")
	proto.RegisterType((*QueryGetScoresResponse)(nil), "singhp1069.spunky.spunky.QueryGetScoresResponse")
	proto.RegisterType((*QueryAllScoresRequest)(nil), "singhp1069.spunky.spunky.QueryAllScoresRequest")
	proto.RegisterType((*QueryAllScoresResponse)(nil), "singhp1069.spunky.spunky.QueryAllScoresResponse")
	proto.RegisterType((*QueryGetNFTRequest)(nil), "singhp1069.spunky.spunky.QueryGetNFTRequest")
	proto.RegisterType((*QueryGetNFTResponse)(nil), "singhp1069.spunky.spunky.QueryGetNFTResponse")
	proto.RegisterType((*QueryAllNFTRequest)(nil), "singhp1069.spunky.spunky.QueryAllNFTRequest")
	proto.RegisterType((*QueryAllNFTResponse)(nil), "singhp1069.spunky.spunky.QueryAllNFTResponse")
}

func init() { proto.RegisterFile("spunky/query.proto", fileDescriptor_afe01d3a1a69d9b5) }

var fileDescriptor_afe01d3a1a69d9b5 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0xb3, 0x49, 0x0c, 0x38, 0xc5, 0x12, 0x26, 0xb6, 0x84, 0xa8, 0x6b, 0x59, 0xc4, 0x8a,
	0xd6, 0x99, 0xa6, 0xa2, 0xe0, 0x45, 0x48, 0xc1, 0xed, 0x45, 0x16, 0x8d, 0x7b, 0x10, 0x11, 0x64,
	0x93, 0x8c, 0xdb, 0xc5, 0xed, 0xce, 0x36, 0x33, 0x11, 0xe3, 0x9f, 0x8b, 0x07, 0xf1, 0x28, 0x48,
	0x3f, 0x80, 0xdf, 0xa6, 0xc7, 0x82, 0x17, 0x4f, 0x22, 0x89, 0x1f, 0x44, 0x76, 0xe6, 0x5d, 0x92,
	0x4d, 0x1b, 0xb6, 0x81, 0x9c, 0x32, 0x4c, 0x9e, 0xf7, 0x7d, 0x7e, 0xef, 0x33, 0x33, 0x8b, 0xb0,
	0x88, 0x07, 0xd1, 0xdb, 0x21, 0x3d, 0x1c, 0xb0, 0xfe, 0x90, 0xc4, 0x7d, 0x2e, 0x39, 0xae, 0x8b,
	0x20, 0xf2, 0xf7, 0xe3, 0xe6, 0xf6, 0x83, 0x87, 0x44, 0xff, 0x0d, 0x3f, 0x8d, 0xab, 0x3e, 0xe7,
	0x7e, 0xc8, 0xa8, 0x17, 0x07, 0xd4, 0x8b, 0x22, 0x2e, 0x3d, 0x19, 0xf0, 0x48, 0xe8, 0xba, 0xc6,
	0xed, 0x2e, 0x17, 0x07, 0x5c, 0xd0, 0x8e, 0x27, 0x98, 0x6e, 0x48, 0xdf, 0x35, 0x3b, 0x4c, 0x7a,
	0x4d, 0x1a, 0x7b, 0x7e, 0x10, 0x29, 0x31, 0x68, 0x6b, 0xe0, 0x2b, 0xba, 0xbc, 0xcf, 0xd2, 0x06,
	0x55, 0xd8, 0x8c, 0xde, 0x48, 0xd8, 0xb9, 0xec, 0x73, 0x9f, 0xab, 0x25, 0x4d, 0x56, 0x7a, 0xd7,
	0xda, 0x44, 0x6b, 0xcf, 0x92, 0xf6, 0x7b, 0x4c, 0x3e, 0x57, 0xf5, 0x6d, 0x76, 0x38, 0x60, 0x42,
	0xe2, 0x55, 0x54, 0x0c, 0x7a, 0x75, 0x63, 0xc3, 0xb8, 0x55, 0x6e, 0x17, 0x83, 0x9e, 0xf5, 0x02,
	0xad, 0xcf, 0x0a, 0x45, 0xcc, 0x23, 0xc1, 0xf0, 0x23, 0x54, 0xd1, 0x3b, 0x4a, 0xbd, 0xb2, 0xb3,
	0x41, 0xe6, 0x0d, 0x4d, 0xb4, 0x6e, 0xb7, 0x7c, 0xfc, 0xe7, 0x7a, 0xa1, 0x0d, 0x55, 0xd6, 0x6b,
	0x40, 0x68, 0x85, 0x61, 0x16, 0xc1, 0x46, 0x68, 0x32, 0x2c, 0x34, 0xbf, 0x49, 0x74, 0x32, 0x24,
	0x49, 0x86, 0xe8, 0xa8, 0x21, 0x19, 0xf2, 0xd4, 0xf3, 0x19, 0xd4, 0xb6, 0xa7, 0x2a, 0xad, 0x9f,
	0x06, 0xb0, 0x4f, 0x39, 0x9c, 0xc1, 0x5e, 0x5a, 0x9c, 0x1d, 0xef, 0x65, 0x10, 0x8b, 0x0a, 0x71,
	0x33, 0x17, 0x51, 0x9b, 0x67, 0x18, 0x6f, 0x20, 0x9c, 0xc6, 0xeb, 0xd8, 0xee, 0xbc, 0x43, 0x78,
	0x82, 0x6a, 0x19, 0x15, 0x4c, 0x71, 0x1f, 0x95, 0x1c, 0xdb, 0x85, 0x84, 0xae, 0xcd, 0x1f, 0xc1,
	0xb1, 0x5d, 0xe0, 0x4f, 0xf4, 0xd6, 0x2b, 0xf0, 0x6c, 0x85, 0xe1, 0x94, 0xe7, 0xb2, 0x52, 0x3f,
	0x32, 0x00, 0x36, 0x6d, 0x3f, 0x0b, 0x5b, 0x5a, 0x04, 0x76, 0x69, 0x49, 0xef, 0x1c, 0x95, 0xd1,
	0x05, 0xc5, 0x85, 0xbf, 0x19, 0xe9, 0xe9, 0x63, 0x3a, 0x9f, 0xe3, 0xcc, 0xe7, 0xd1, 0xd8, 0x3e,
	0x7f, 0x81, 0x66, 0xb0, 0xae, 0x7c, 0xf9, 0xf5, 0xef, 0x47, 0x71, 0x0d, 0xd7, 0x68, 0xe6, 0xbd,
	0xd2, 0x8f, 0x41, 0xef, 0x33, 0xfe, 0x6a, 0xa0, 0x8b, 0x5a, 0xdf, 0x0a, 0xc3, 0x5c, 0x9a, 0xd9,
	0x97, 0x92, 0x4b, 0x73, 0xea, 0xe2, 0x5b, 0xeb, 0x8a, 0xa6, 0x8a, 0x57, 0xb3, 0x34, 0xf8, 0x93,
	0x3a, 0x1d, 0xbc, 0x95, 0x3f, 0xde, 0xe4, 0xca, 0x34, 0xee, 0x9e, 0x53, 0x0d, 0xde, 0x75, 0xe5,
	0x8d, 0x71, 0x35, 0xf5, 0x76, 0x6c, 0x57, 0xc7, 0xf0, 0x01, 0x55, 0x1c, 0xdb, 0x4d, 0x22, 0xd8,
	0xca, 0x9f, 0x68, 0x01, 0x80, 0xec, 0x15, 0xb4, 0x6a, 0x0a, 0xe0, 0x12, 0x5e, 0x99, 0x02, 0xd8,
	0x7d, 0x7c, 0x3c, 0x32, 0x8d, 0x93, 0x91, 0x69, 0xfc, 0x1d, 0x99, 0xc6, 0xf7, 0xb1, 0x59, 0x38,
	0x19, 0x9b, 0x85, 0xdf, 0x63, 0xb3, 0xf0, 0xf2, 0x8e, 0x1f, 0xc8, 0xfd, 0x41, 0x87, 0x74, 0xf9,
	0x01, 0x9d, 0xf8, 0xa4, 0xb5, 0xef, 0xd3, 0x85, 0x1c, 0xc6, 0x4c, 0x74, 0x2a, 0xea, 0xbb, 0x7a,
	0xef, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xca, 0x3f, 0xc1, 0x84, 0x0e, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a scores by id.
	Scores(ctx context.Context, in *QueryGetScoresRequest, opts ...grpc.CallOption) (*QueryGetScoresResponse, error)
	// Queries a list of scores items.
	ScoresAll(ctx context.Context, in *QueryAllScoresRequest, opts ...grpc.CallOption) (*QueryAllScoresResponse, error)
	// Queries a nFT by id.
	NFT(ctx context.Context, in *QueryGetNFTRequest, opts ...grpc.CallOption) (*QueryGetNFTResponse, error)
	// Queries a list of nFT items.
	NFTAll(ctx context.Context, in *QueryAllNFTRequest, opts ...grpc.CallOption) (*QueryAllNFTResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Scores(ctx context.Context, in *QueryGetScoresRequest, opts ...grpc.CallOption) (*QueryGetScoresResponse, error) {
	out := new(QueryGetScoresResponse)
	err := c.cc.Invoke(ctx, "/singhp1069.spunky.spunky.Query/Scores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScoresAll(ctx context.Context, in *QueryAllScoresRequest, opts ...grpc.CallOption) (*QueryAllScoresResponse, error) {
	out := new(QueryAllScoresResponse)
	err := c.cc.Invoke(ctx, "/singhp1069.spunky.spunky.Query/ScoresAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFT(ctx context.Context, in *QueryGetNFTRequest, opts ...grpc.CallOption) (*QueryGetNFTResponse, error) {
	out := new(QueryGetNFTResponse)
	err := c.cc.Invoke(ctx, "/singhp1069.spunky.spunky.Query/NFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NFTAll(ctx context.Context, in *QueryAllNFTRequest, opts ...grpc.CallOption) (*QueryAllNFTResponse, error) {
	out := new(QueryAllNFTResponse)
	err := c.cc.Invoke(ctx, "/singhp1069.spunky.spunky.Query/NFTAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a scores by id.
	Scores(context.Context, *QueryGetScoresRequest) (*QueryGetScoresResponse, error)
	// Queries a list of scores items.
	ScoresAll(context.Context, *QueryAllScoresRequest) (*QueryAllScoresResponse, error)
	// Queries a nFT by id.
	NFT(context.Context, *QueryGetNFTRequest) (*QueryGetNFTResponse, error)
	// Queries a list of nFT items.
	NFTAll(context.Context, *QueryAllNFTRequest) (*QueryAllNFTResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Scores(ctx context.Context, req *QueryGetScoresRequest) (*QueryGetScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scores not implemented")
}
func (*UnimplementedQueryServer) ScoresAll(ctx context.Context, req *QueryAllScoresRequest) (*QueryAllScoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScoresAll not implemented")
}
func (*UnimplementedQueryServer) NFT(ctx context.Context, req *QueryGetNFTRequest) (*QueryGetNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFT not implemented")
}
func (*UnimplementedQueryServer) NFTAll(ctx context.Context, req *QueryAllNFTRequest) (*QueryAllNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NFTAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Scores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Scores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/singhp1069.spunky.spunky.Query/Scores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Scores(ctx, req.(*QueryGetScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScoresAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScoresAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/singhp1069.spunky.spunky.Query/ScoresAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScoresAll(ctx, req.(*QueryAllScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/singhp1069.spunky.spunky.Query/NFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFT(ctx, req.(*QueryGetNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NFTAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NFTAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/singhp1069.spunky.spunky.Query/NFTAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NFTAll(ctx, req.(*QueryAllNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "singhp1069.spunky.spunky.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scores",
			Handler:    _Query_Scores_Handler,
		},
		{
			MethodName: "ScoresAll",
			Handler:    _Query_ScoresAll_Handler,
		},
		{
			MethodName: "NFT",
			Handler:    _Query_NFT_Handler,
		},
		{
			MethodName: "NFTAll",
			Handler:    _Query_NFTAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spunky/query.proto",
}

func (m *QueryGetScoresRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetScoresRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetScoresRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetScoresResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetScoresResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetScoresResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Scores.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllScoresRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScoresRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScoresRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllScoresResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllScoresResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllScoresResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NFT.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNFTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNFTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNFTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NFT) > 0 {
		for iNdEx := len(m.NFT) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NFT[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetScoresRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetScoresResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Scores.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllScoresRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllScoresResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NFT.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNFTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NFT) > 0 {
		for _, e := range m.NFT {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetScoresRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetScoresRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetScoresRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetScoresResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetScoresResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetScoresResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Scores.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScoresRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScoresRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScoresRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllScoresResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllScoresResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllScoresResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, Scores{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NFT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNFTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNFTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNFTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NFT = append(m.NFT, NFT{})
			if err := m.NFT[len(m.NFT)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
