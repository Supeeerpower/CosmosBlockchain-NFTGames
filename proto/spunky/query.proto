syntax = "proto3";
package singhp1069.spunky.spunky;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "spunky/scores.proto";
import "spunky/nft.proto";
// this line is used by starport scaffolding # 1
import "gogoproto/gogo.proto";

option go_package = "github.com/singhp1069/spunky/x/spunky/types";

// Query defines the gRPC querier service.
service Query {
// Queries a scores by id.
	rpc Scores(QueryGetScoresRequest) returns (QueryGetScoresResponse) {
		option (google.api.http).get = "/spunky/scores/{id}";
	}

	// Queries a list of scores items.
	rpc ScoresAll(QueryAllScoresRequest) returns (QueryAllScoresResponse) {
		option (google.api.http).get = "/spunky/scores";
	}

// Queries a NFT by id.
	rpc NFT(QueryGetNFTRequest) returns (QueryGetNFTResponse) {
		option (google.api.http).get = "/spunky/NFT/{id}";
	}

	// Queries a list of NFT items.
	rpc NFTAll(QueryAllNFTRequest) returns (QueryAllNFTResponse) {
		option (google.api.http).get = "/spunky/NFT";
	}

// this line is used by starport scaffolding # 2
}

message QueryGetScoresRequest {
	uint64 id = 1;
}

message QueryGetScoresResponse {
	Scores Scores = 1 [(gogoproto.nullable) = false];
}

message QueryAllScoresRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllScoresResponse {
	repeated Scores Scores = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetNFTRequest {
	uint64 id = 1;
}

message QueryGetNFTResponse {
	NFT NFT = 1 [(gogoproto.nullable) = false];
}

message QueryAllNFTRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNFTResponse {
	repeated NFT NFT = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
